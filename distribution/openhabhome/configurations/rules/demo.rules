import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*

var Timer powerstattimer1
var Timer powerstattimer2
var Timer zwaveAlertTimer

rule Startup
when 
	System started
then
	logInfo("Startup called","Welcome at Plegma demo!!")
	//sendMail("mn@pleg.ma", "test","body")
end

rule Goodbye
when 
	System shuts down
then
	logInfo("Goodbye called","Goodbye from Plegma demo!!")
end


/* 
rule "koukos"
	when 
		Time cron "0 0 * * * ?"
	then
		say("  it is" + now.toString("h")+ " O clock at Plegma !! ")
end


rule "Log temperature on update"
	when 
		Item Weather_Temperature received update
	then
		logInfo("mylogtemp","The temperature in Athens is " + Weather_Temperature.state.format("%d") + " degrees celsius")
end 

rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or 
	Time cron "0 0 0 * * ?" or
	System started
	
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
end*/


/*
rule "send alert"
when 
  Item SolarTemp1 received update
  then
  if (Weather_Temperature.state > 10){
  sendMail("mn@pleg.ma", "test 10","body") }

end
  */
 




/** calculate daily consumption 
rule "powerstats"
when
	Item janitza_totalenergy received update
then	

logInfo( "rules.powerstats", "starting..")

var Number totalPower = janitza_totalenergy.state as DecimalType

var Number avToday = (janitza_power.averageSince(now.minusHours(now.getHourOfDay))/1000).intValue
var Number avMonth = (janitza_power.averageSince(now.minusDays(now.getDayOfMonth()))/1000).intValue
var Number avTotal = (janitza_power.averageSince(now.minusDays(now.getDayOfYear))/1000).intValue

var Number eToday = totalPower - janitza_totalenergy.historicState(now.minusHours(now.getHourOfDay)).state as DecimalType
var Number eYesterday = totalPower - janitza_totalenergy.historicState(now.minusHours(now.getHourOfDay).minusDays(1)).state as DecimalType
var Number avYesterday = ((eYesterday - eToday)/24).intValue


if(janitza_totalenergy.historicState(now.minusDays(now.getDayOfMonth())) !=null){
	var Number eMonth = totalPower - janitza_totalenergy.historicState(now.minusDays(now.getDayOfMonth())).state as DecimalType
	postUpdate( Energy_used_month, eMonth  )
}
postUpdate( Energy_used_today, eToday  )
postUpdate( AvPower_today, avToday  )
postUpdate( AvPower_yesterday, avYesterday )
postUpdate( AvPower_month, avMonth  )
postUpdate( AvPower_total, avTotal  )

logInfo( "rules.powerstats", "finished..")
end
*/


/*
// calculate daily consumption 

rule "powerstats"
when
	Item HEM_E1 received update
	or Item HEM_E2 received update
	or Item HEM_E3 received update
then	

	logInfo( "rules.powerstats", "starting..")
	if( HEM_P1.state >=0 && HEM_P2.state >=0 && HEM_P3.state >=0){
		var Number totalPower = HEM_P1.state as DecimalType + HEM_P2.state as DecimalType + HEM_P3.state as DecimalType
		totalPower = totalPower/1000 
		if (totalPower >=0) {
			postUpdate( HEM_P, totalPower )
			
			if(powerstattimer1==null || powerstattimer1.hasTerminated){
				HEM_P.persist
				powerstattimer1 = createTimer(now.plusMinutes(1))[|]
        	}else {
        		logWarn( "powerstattimer","did not persist HEM_P cause timer is still running")
        	}
			
		} else logWarn( "powerstats","totalPower calculation error 1")
	} else logWarn( "powerstats","totalPower calculation error 2")
	
	if( HEM_E1.state >=0 && HEM_E2.state >=0 && HEM_E3.state >=0){		
		var Number totalEnergy = HEM_E1.state as DecimalType + HEM_E2.state as DecimalType + HEM_E3.state as DecimalType 
		if (totalEnergy >=0) {
			postUpdate( HEM_E, totalEnergy )
			if(powerstattimer2==null || powerstattimer2.hasTerminated){
				HEM_E.persist
				powerstattimer2 = createTimer(now.plusMinutes(1))[|]
        	}else {
        		logWarn( "powerstattimer","did not persist HEM_E cause timer is still running")
        	}
		} 
	}

logInfo( "powerstats", "finished..")
end


rule "voltstats"
	when
		Item HEM_V1 received update
		or Item HEM_V2 received update
		or Item HEM_V3 received update
	then	

	if( HEM_V1.state >=0 && HEM_V2.state >=0 && HEM_V3.state >=0){	
		var Number avgVoltage = (HEM_V1.state as DecimalType + HEM_V2.state as DecimalType + HEM_V3.state as DecimalType) /3 
		if (avgVoltage >=0) {
			postUpdate( HEM_V, avgVoltage )
		} 
	}
end

rule "currentstats"
	when
		Item HEM_C1 received update
		or Item HEM_C2 received update
		or Item HEM_C3 received update
	then	
	 
	if( HEM_C1.state >=0 && HEM_C2.state >=0 && HEM_C3.state >=0){
	var Number totalCurrent = HEM_C1.state as DecimalType + HEM_C2.state as DecimalType + HEM_C3.state as DecimalType 
		if (totalCurrent >=0) postUpdate( HEM_C, totalCurrent )
	}
end


*/





/*

rule "emmSocketRule"

     when 
            Time cron "0 * * * * ?" //every minute
     then
            sendCommand(emm_cmd, "Temperature")
            postUpdate(emm_Temperature, new Float(emm_cmd.state.toString()))
            emm_Temperature.persist
            sendCommand(emm_cmd, "Total Energy")
            postUpdate(emm_TotalEnergy, new Float(emm_cmd.state.toString()))
            emm_TotalEnergy.persist
            sendCommand(emm_cmd, "Active Power")
            postUpdate(emm_ActivePower, new Float(emm_cmd.state.toString()))
            emm_ActivePower.persist
            sendCommand(emm_cmd, "Channel1")
            postUpdate(emm_Channel1, new Float(emm_cmd.state.toString()))
            emm_Channel1.persist
            sendCommand(emm_cmd, "Channel2")
            postUpdate(emm_Channel2, new Float(emm_cmd.state.toString()))
            emm_Channel2.persist
            sendCommand(emm_cmd, "Channel3")
            postUpdate(emm_Channel3, new Float(emm_cmd.state.toString()))
            emm_Channel3.persist
            sendCommand(emm_cmd, "Channel4")
            postUpdate(emm_Channel4, new Float(emm_cmd.state.toString()))
            emm_Channel4.persist
            sendCommand(emm_cmd, "Channel5")
            postUpdate(emm_Channel5, new Float(emm_cmd.state.toString()))
            emm_Channel5.persist
            sendCommand(emm_cmd, "Channel6")
            postUpdate(emm_Channel6, new Float(emm_cmd.state.toString()))
            emm_Channel6.persist
            sendCommand(emm_cmd, "Channel7")
            postUpdate(emm_Channel7, new Float(emm_cmd.state.toString()))
            emm_Channel7.persist
            sendCommand(emm_cmd, "Channel8")
            postUpdate(emm_Channel8, new Float(emm_cmd.state.toString()))
            emm_Channel8.persist
end

*/
